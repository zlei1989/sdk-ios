// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import JavaScriptCore;
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"



/// 用户账号信息类
SWIFT_CLASS("_TtC3sdk15ICC_AcctData_OC")
@interface ICC_AcctData : NSObject
/// 获得用户 id
///
/// returns:
///
- (NSString * _Nonnull)getId SWIFT_WARN_UNUSED_RESULT;
/// 设置用户 id
/// \param str 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setId:(NSString * _Nonnull)str;
/// 获得 所在服务器标识
///
/// returns:
///
- (NSString * _Nonnull)getServerId SWIFT_WARN_UNUSED_RESULT;
/// 设置 所在服务器标识
/// \param str 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setServerId:(NSString * _Nonnull)str;
/// 获得 所在服务器名称
///
/// returns:
///
- (NSString * _Nonnull)getServerName SWIFT_WARN_UNUSED_RESULT;
/// 设置 所在服务器名称
/// \param str 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setServerName:(NSString * _Nonnull)str;
/// 获得 角色标识
///
/// returns:
///
- (NSString * _Nonnull)getRoleId SWIFT_WARN_UNUSED_RESULT;
/// 设置 角色标识
/// \param str 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setRoleId:(NSString * _Nonnull)str;
/// 获得 角色名称
///
/// returns:
///
- (NSString * _Nonnull)getRoleName SWIFT_WARN_UNUSED_RESULT;
/// 设置 角色名称
/// \param str 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setRoleName:(NSString * _Nonnull)str;
/// 获得 角色等级
///
/// returns:
///
- (NSString * _Nonnull)getLv SWIFT_WARN_UNUSED_RESULT;
/// 设置 角色等级
/// \param str 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setLv:(NSString * _Nonnull)str;
/// 获得 VIP 等级
///
/// returns:
///
- (NSString * _Nonnull)getVip SWIFT_WARN_UNUSED_RESULT;
/// 设置 VIP 等级
/// \param str 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setVip:(NSString * _Nonnull)str;
/// 获得 工会，帮派标识
///
/// returns:
///
- (NSString * _Nonnull)getPartyId SWIFT_WARN_UNUSED_RESULT;
/// 设置 工会，帮派标识
/// \param str 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setPartyId:(NSString * _Nonnull)str;
/// 获得 工会，帮派名称
///
/// returns:
///
- (NSString * _Nonnull)getPartyName SWIFT_WARN_UNUSED_RESULT;
/// 设置 工会，帮派名称
/// \param str 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setPartyName:(NSString * _Nonnull)str;
/// 获得 用户余额
///
/// returns:
///
- (NSString * _Nonnull)getBalance SWIFT_WARN_UNUSED_RESULT;
/// 设置 用户余额
/// \param str 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setBalance:(NSString * _Nonnull)str;
/// 获得 扩展属性
///
/// returns:
///
- (NSDictionary<NSString *, id> * _Nullable)getExtra SWIFT_WARN_UNUSED_RESULT;
/// 设置 扩展属性
/// \param dic 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setExtra:(NSDictionary<NSString *, id> * _Nullable)dic;
/// 获得 角色创建时间
///
/// returns:
///
- (NSString * _Nonnull)getCreated SWIFT_WARN_UNUSED_RESULT;
/// 设置 角色创建时间
/// \param str 值
///
///
/// returns:
///
- (ICC_AcctData * _Nonnull)setCreated:(NSString * _Nonnull)str;
/// 转换为字符串
///
/// returns:
///
- (NSString * _Nonnull)toJSONString SWIFT_WARN_UNUSED_RESULT;
/// 获得json对象
///
/// returns:
///
- (NSDictionary<NSString *, id> * _Nonnull)getJSONObject SWIFT_WARN_UNUSED_RESULT;
/// 清理数据
- (void)clear;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 触发枚举
typedef SWIFT_ENUM(NSInteger, TRIGGER) {
    TRIGGER_CREATE = 1,
    TRIGGER_UPDATE = 2,
    TRIGGER_LOGIN = 3,
    TRIGGER_TRANSACTION = 4,
    TRIGGER_LOGOUT = 5,
    TRIGGER_EXIT = 6,
};

/// 完成回调协议
SWIFT_PROTOCOL("_TtP3sdk15ICC_Callback_OC_")
@protocol ICC_Callback <NSObject>
/// 操作结束后调用此方法
/// \param resultJSON 操作结果JSON格式字符串
///
- (void)result:(NSString * _Nonnull)resultJSON;
@end


/// 输出日志
SWIFT_CLASS("_TtC3sdk10ICC_Device")
@interface ICC_Device : NSObject
/// 当前设备信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ICC_Device * _Nonnull current;)
+ (ICC_Device * _Nonnull)current SWIFT_WARN_UNUSED_RESULT;
/// 设备入网标示
@property (nonatomic, readonly, copy) NSString * _Nullable imei;
/// SIM 卡服务商
@property (nonatomic, readonly, copy) NSString * _Nullable simOperator;
/// SIM 卡序列号
@property (nonatomic, readonly, copy) NSString * _Nullable simSerialNumber;
/// 网卡地址
@property (nonatomic, readonly, copy) NSString * _Nonnull macAddress;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC3sdk10ICC_SDK_OC")
@interface ICC_SDK : NSObject
/// 获得单件实例
///
/// returns:
/// 当前对象实例
+ (ICC_SDK * _Nonnull)getInstance;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// 注册账号
/// \param callback 回调对象
///
- (void)register:(id <ICC_Callback> _Nonnull)callback;
/// 登录账号
/// \param callback 回调对象
///
- (void)login:(id <ICC_Callback> _Nonnull)callback;
/// 支付
/// \param tradeInfo 由服务端签名序列化后的交易信息
///
/// \param callback 回调对象
///
- (void)transaction:(NSString * _Nonnull)tradeInfo :(id <ICC_Callback> _Nonnull)callback;
/// 账号中心
/// 包括账号转正、修改密码、实名认证、等账号管理功能
/// \param callback 回调对象
///
- (void)center:(id <ICC_Callback> _Nonnull)callback;
/// 登录账号
/// \param callback 回调对象
///
- (void)logout:(id <ICC_Callback> _Nonnull)callback;
/// 退出游戏
/// \param callback 回调对象
///
- (void)exit:(id <ICC_Callback> _Nonnull)callback;
/// 设置浮标状态
/// \param enabled 是否显示 true/是 false/否
///
- (void)setAssistiveTouchState:(BOOL)enabled;
/// 提交数据
/// \param data 账号数据
///
/// \param trigger 提交数据类型
///
- (void)pushAcctData:(ICC_AcctData * _Nonnull)data :(enum TRIGGER)trigger;
@end

#pragma clang diagnostic pop
